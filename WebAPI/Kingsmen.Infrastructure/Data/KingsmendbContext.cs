// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Kingsmen.Domain.Entities;

namespace Kingsmen.Infrastructure.Data
{
    public partial class KingsmendbContext
        : DbContext
    {
        public KingsmendbContext()
        {

        }

        public KingsmendbContext(DbContextOptions<KingsmendbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ConfigurationItem> ConfigurationItem { get; set; }
        public virtual DbSet<ControlPoint> ControlPoint { get; set; }
        public virtual DbSet<FunctionalAbility> FunctionalAbility { get; set; }
        public virtual DbSet<FunctionalAbilityControlPoint> FunctionalAbilityControlPoint { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleFunctionalAbility> RoleFunctionalAbility { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=AuthPoC;Integrated Security=true");

            modelBuilder.Entity<Client>(entity =>
            {
                entity.Property(e => e.Name).IsRequired();
                entity.Property(e => e.ClientPrefix)
                    .HasMaxLength(3)
                    .IsRequired();
            });

            modelBuilder.Entity<FunctionalAbility>(entity =>

                entity.HasMany(f => f.FunctionalAbilityControlPoints)
                    .WithOne(f=> f.FunctionalAbility)
            );

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });


            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(30);

            });

            modelBuilder.Entity<FunctionalAbilityControlPoint>(entity =>
            {
                entity.HasKey(k => new { k.ControlPoint_Id, k.FunctionalAbility_Id });

                entity.HasOne(e => e.FunctionalAbility)
                    .WithMany(e => e.FunctionalAbilityControlPoints)
                    .HasForeignKey(e => e.FunctionalAbility_Id);

                entity.HasOne(e => e.ControlPoint)
                    .WithMany(e => e.FuntionalAbilityControlPoints)
                    .HasForeignKey(e => e.ControlPoint_Id);

            });

            modelBuilder.Entity<RoleFunctionalAbility>(entity =>
            {
                entity.HasOne(e => e.Role)
                    .WithMany(e => e.RoleFunctionalAbilities)
                    .HasForeignKey(e => e.Role_Id)
                    .HasConstraintName("FK_RoleFunctionalAbility_Role");

                entity.HasOne(e => e.FunctionalAbility)
                    .WithMany(e => e.RoleFunctionalAbilities)
                    .HasForeignKey(e => e.FunctionalAbility_Id)
                    .HasConstraintName("FK_RoleFunctionalAbility_FunctionalAbility");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(d => d.UserRoles)
                    .HasForeignKey(d => d.User_Id)
                    .HasConstraintName("FK_UserRole_User");

                entity.HasOne(d => d.Role)
                    .WithMany(d => d.UserRoles)
                    .HasForeignKey(d => d.Role_Id)
                    .HasConstraintName("FK_UserRole_Role");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
